
pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        // IMAGE_NAME = 'churn-api'
        ECR_REPO = "<your_account_id>.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}"
        IMAGE_NAME = 'pratish7991/churn-api'  // Replace with your actual Docker Hub repo
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-creds'  // Jenkins credential ID
    }

    stages {
        stage('Clone Repo') {
            steps {
                scripts{
                    echo 'Cloning Guthub repo to Jenkins.......'
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-creds', url: 'https://github.com/pratish7991/mlopsproject.git']])
                }
            }
        }

        // stage('Install Dependencies') {
        //     steps {
        //         sh 'pip install -r requirements.txt'
        //     }
        // }

        // stage('Run Tests') {
        //     steps {
        //         sh 'pytest tests/'
        //     }
        // }

        // stage('Build Docker Image') {
        //     steps {
        //         sh 'docker build -t $IMAGE_NAME:latest .'
        //     }
        // }

        // stage('Push to Docker Hub') {
        //     steps {
        //         withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
        //             sh '''
        //                 echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        //                 docker push $IMAGE_NAME:latest
        //             '''
        //         }
        //     }
        // }

        // stage('Push to ECR') {
        //     steps {
        //         withCredentials([[
        //             $class: 'AmazonWebServicesCredentialsBinding',
        //             credentialsId: 'aws-creds'
        //         ]]) {
        //             sh '''
        //                 aws --version
        //                 aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
        //                 docker tag $IMAGE_NAME:latest $ECR_REPO:latest
        //                 docker push $ECR_REPO:latest
        //             '''
        //         }
        //     }
        // }

        // stage('Deploy to ECS') {
        //     steps {
        //         sh '''
        //             aws ecs update-service \
        //               --cluster mlops-cluster \
        //               --service churn-service \
        //               --force-new-deployment \
        //               --region $AWS_REGION
        //         '''
        //     }
        // }
    }
}