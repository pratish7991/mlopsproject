pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_NAME = 'churn-api'
        DOCKERHUB_IMAGE = 'pratish0078/churn-api'
        ECR_REPO = "441332670522.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}"
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-creds'
    }

    stages {
        stage('Clone Repo') {
            steps {
                script {
                    echo 'Cloning GitHub repo to Jenkins...'
                    checkout scmGit(
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[
                            credentialsId: 'github-creds',
                            url: 'https://github.com/pratish7991/mlopsproject.git'
                        ]]
                    )
                }
            }
        }

        stage('Set up Python Venv and Install Requirements') {
            steps {
                bat '''
                    python -m venv venv
                    call venv\\Scripts\\activate
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build -t %IMAGE_NAME% .'
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKERHUB_CREDENTIALS_ID}",
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    bat '''
                        docker tag %IMAGE_NAME% %DOCKERHUB_IMAGE%
                        docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%
                        docker push %DOCKERHUB_IMAGE%
                    '''
                }
            }
        }

        stage('Tag Docker Image for ECR') {
            steps {
                bat 'docker tag %IMAGE_NAME% %ECR_REPO%:latest'
            }
        }

        stage('Push to AWS ECR') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds'
                ]]) {
                    bat '''
                        aws --version
                        aws ecr get-login-password --region %AWS_REGION% | docker login --username AWS --password-stdin %ECR_REPO%
                        docker push %ECR_REPO%:latest
                    '''
                }
            }
        }
    }
}
